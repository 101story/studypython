===========
today's topic is related to python.

I would like to start with the intro which is why i chose this topic

it's totally my pure curiosity as learning new computer languge.

because after knowing this i could feel familier with new computer languge. 

It could help to you guys but i'm sure you don't need to know this during using python.

first,since this topic started from this, i wanna mention our study with fluent python study

===========

fluent python 2019년 9월 ~ 2020년 1월 (one day a week, totally 5 months or about 20 days) 

the book has 21 chapter with 600 pages (without appendix and table) totally 766

schedule table devied by pages (always flexable and put many days off to next)

https://docs.google.com/spreadsheets/d/1y-K7Jj2iSz_Vje894wbIDdy3Q3DwsYYuJPZJpjqOWCw/edit#gid=0

thanks to 호영 we could study continuously.

the first chapter is Data Model. the curiousity was started by that time.

while i was reading even first chapter, i couldn't get what data model is. and i found the metadata concept.

===========

and i kept some blogs looked helping to undersand it and i decided to read them if i got bored while free time.

but i didn't have the tiem to read them even during Seollal too. 

finally i started to read one last week to prepare today presentation

and i'd like to share what i read

this one helped for me to start to understand how python works.

it's still vague though

=========== blog

he wrote this blog used cpython (default interpreter) to understand python code in the memory.

what is cpython

cpython (default interpreter)

CPython compiles your Python code into bytecode (transparently)

So CPython does not translate your Python code to C by itself.

the interpreter also run the bytecode compiled by python with library modules in VM

===========  dis

dis helps to see disassembly of python code executed by the python interpreter 

=========== code compare

c code is already defined the type. that mean complier can know how much memory sould be assign

but here the interpreter knows only that 1 and 2 are objects. 
the interpreter must inspect what type it is.

when assinging 1 to a, those happen. 
first the interpreter set the type and finally assing the value

since every steps should include the process inspecting the type, 

The dynamic typing has a lot more steps involved with any operation.

=========== reason 3.

python use the standard List objct

A NumPy array is a Python object build around a C array.

That is, it has a pointer to a contiguous data buffer of values.

hacking around on the internals of the Python language, 
and found that the process itself is pretty enlightening.

let's dig into python

=========== python Integer

we'll use Python's built-in ctypes module to introspect Python's integer type

But first we need to know what a Python integer looks like at the level of the C API.

our integer object works out to something like the following structure

We start with defining a Python representation of the C structure:

=========== integer structure

The ob_refcnt variable is the reference count for the object,

the ob_type variable is a pointer to the structure containing all the type information
and method definitions for the object,

and the ob_digit holds the actual numerical value.

=========== 42

let's look at the internal representation for some number, say 42

if you define the structure, integer object information would be matched this fields of the structure

We've only created a single value, but as you know python works only one copy of these numbers exist in memory.

=========== graph

We see that zero is referenced several thousand times and the references is getting decreased'

let's see another case

=========== visual site

that's almost of all about the blog contents

those things helped i could be ready to understand the difference thing between python and c

if you are interested in looking into how python works, you can use VISUALIZE CODE site.

actually, the most important thing which could help you is next.

BUT I'd like to make a brief mention of them because there is a lot of information about that than what we saw together.

in addition, I didnt' organize it yet

i just wanna mention what is object class in python class for the end of my presentation

=========== object type

we can see that the top of our mlcore class is object.

object class is the most top class of any python class.

Type class alsot is the most top class but type and object are instances of each other

and all python built-in class base on object class. any type and collection class like int, str, list etc

even function module also base on object.

in other words, Type class is for inspecting type and Object class is based on all class.

with this information you can start understand python languge.

if you wanna study more you can start with what metadata and datamodel. this site is helping me to understand them.

here is all my presentation.

maybe i couldn't answer your question but just in case.. any question?

